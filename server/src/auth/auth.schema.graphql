scalar Date

type Auth {
  id: ID
  email: String
  google_id: String
  username: String
  phone: String
  role: String
  isActive: Boolean
  emailToken: String
  profile: User
}

type LoginResponse {
  id: ID
  token: String
  isActive: Boolean
  authId: String
}

type Query {
  me: User
  verifyToken(token: String): User
  verifyToChangePassword(id: ID, token: String): User
}

type Mutation {
  createUser(input: UserInput): Auth
  signup(input: SignupInput): Auth
  login(email: String, password: String): LoginResponse
  verifyToken(token: String): Auth
  verifyOTP(otp: Int): User
  resendVerification(id: ID): User
  forgotPassword(phone: String): User
  changeAuthPassword(password: String!, oldPassword: String!): User
  changePassword(id: ID!, password: String!): User
  checkEmail(email: String): User
  validateUsername(username: String): Boolean
  validateEmail(email: String): Boolean
  newPassword(password: String): User
  resendOtp(phone: String): User
  loginWithPhone(input: LoginWithPhoneInput): LoginResponse
  registerWithEmail(email: String, password: String): User
}

input LoginWithPhoneInput {
  phone: String
  password: String
}

input SignupInput {
  id: ID
  email: String
  username: String
  phone: String
  password: String
}
